
#!/usr/bin/env python3
"""
Complete Embroidery Management Workflow
Ch·∫°y t·ª´ng b∆∞·ªõc ho·∫∑c t·∫•t c·∫£ c√°c b∆∞·ªõc trong quy tr√¨nh qu·∫£n l√Ω file th√™u.
"""

import os
import sys
import subprocess
from pathlib import Path
import logging
from datetime import datetime

def move_pes_folders():
    """Gom t·∫•t c·∫£ c√°c th∆∞ m·ª•c con c√≥ file pes v√†o th∆∞ m·ª•c pes trong t·ª´ng A, B, C, D."""
    base_sorted = Path("sorted")
    group_folders = ["A", "B", "C", "D"]
    pes_folder_name = "pes"
    pes_count = 0
    for group in group_folders:
        group_path = base_sorted / group
        if not group_path.exists() or not group_path.is_dir():
            continue
        pes_path = group_path / pes_folder_name
        pes_path.mkdir(exist_ok=True)
        # Duy·ªát t·∫•t c·∫£ th∆∞ m·ª•c con trong group
        for sub in group_path.iterdir():
            if sub.is_dir() and sub.name != pes_folder_name:
                pes_files = list(sub.glob("*.pes"))
                if pes_files:
                    # Di chuy·ªÉn to√†n b·ªô th∆∞ m·ª•c v√†o pes
                    dest = pes_path / sub.name
                    if dest.exists():
                        log_print(f"‚ö†Ô∏è Th∆∞ m·ª•c ƒë√£ t·ªìn t·∫°i: {dest}, b·ªè qua!")
                        continue
                    sub.rename(dest)
                    pes_count += 1
                    log_print(f"ƒê√£ di chuy·ªÉn {sub} v√†o {pes_path}")
    log_print(f"\n‚úÖ ƒê√£ gom {pes_count} th∆∞ m·ª•c c√≥ file pes v√†o pes/ trong t·ª´ng nh√≥m.")

# Setup logging
def setup_logging():
    """Setup logging to both console and file."""
    log_file = "workflow_log.txt"
    
    # Create logger
    logger = logging.getLogger('workflow')
    logger.setLevel(logging.DEBUG)
    
    # Clear existing handlers
    logger.handlers.clear()
    
    # Create formatters
    formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
    
    # File handler
    file_handler = logging.FileHandler(log_file, encoding='utf-8')
    file_handler.setLevel(logging.DEBUG)
    file_handler.setFormatter(formatter)
    logger.addHandler(file_handler)
    
    # Console handler
    console_handler = logging.StreamHandler()
    console_handler.setLevel(logging.INFO)
    console_handler.setFormatter(formatter)
    logger.addHandler(console_handler)
    
    return logger

# Initialize logger
logger = setup_logging()

def log_print(message):
    """Print and log message."""
    # print(message)
    logger.info(message)

def check_requirements():
    """Check if all required scripts exist."""
    required_scripts = [
        "download_from_dropbox.py",
        "sort_cli.py", 
        "export_dst.py",
        "map_dst_labels.py"
    ]
    
    missing = []
    for script in required_scripts:
        if not os.path.exists(script):
            missing.append(script)
    
    if missing:
        log_print(f"‚ùå Missing required scripts: {', '.join(missing)}")
        return False
    
    log_print("‚úÖ All required scripts found")
    return True

def run_script_with_input(script_name, description, auto_inputs=None, args=None):
    """Run script with predefined inputs."""
    try:
        cmd = [sys.executable, script_name]
        if args:
            cmd.extend(args)
        
        # Prepare input string
        input_text = ""
        if auto_inputs:
            input_text = "\n".join(str(inp) for inp in auto_inputs) + "\n"
        
        log_print("="*60)
        log_print(f"RUNNING: {description}")
        log_print(f"Script: {script_name}")
        log_print(f"Auto inputs: {auto_inputs}")
        log_print("="*60)
        
        # Run with input
        result = subprocess.run(
            cmd,
            input=input_text,
            text=True,
            capture_output=False,
            cwd=os.getcwd()
        )
        
        return result.returncode == 0
        
    except Exception as e:
        log_print(f"‚ùå Error running {script_name}: {e}")
        return False

def run_script_with_partial_input(script_name, description, auto_inputs=None):
    """Run script with partial automation - auto '5' and 'y', then user input for start/end."""
    try:
        log_print("="*60)
        log_print(f"RUNNING: {description}")
        log_print(f"Script: {script_name}")
        log_print("="*60)
        
        log_print("üìù AUTO MODE:")
        log_print("   ‚úÖ T·ª± ƒë·ªông ch·ªçn option '5' v√† x√°c nh·∫≠n 'y'")
        log_print("   üë§ B·∫°n s·∫Ω nh·∫≠p start ID v√† end ID sau khi th·∫•y API range")
        log_print("")
        
        # Set environment variable to signal partial auto mode to the download script
        os.environ['PARTIAL_AUTO_MODE'] = '1'
        os.environ['AUTO_OPTION'] = '5'
        os.environ['AUTO_CONFIRM'] = 'y'
        
        try:
            # Run the script normally - it will check environment variables
            cmd = [sys.executable, script_name]
            result = subprocess.run(cmd, cwd=os.getcwd())
            return result.returncode == 0
        finally:
            # Clean up environment variables
            os.environ.pop('PARTIAL_AUTO_MODE', None)
            os.environ.pop('AUTO_OPTION', None)
            os.environ.pop('AUTO_CONFIRM', None)
        
    except Exception as e:
        log_print(f"‚ùå Error in partial auto mode: {e}")
        log_print("üîÑ Falling back to fully interactive mode...")
        return run_script(script_name, description)

def run_script(script_name, description, args=None):
    """Run script interactively."""
    try:
        cmd = [sys.executable, script_name]
        if args:
            cmd.extend(args)
        
        log_print("="*60)
        log_print(f"RUNNING: {description}")
        log_print(f"Script: {script_name}")
        log_print("="*60)
        
        result = subprocess.run(cmd, cwd=os.getcwd())
        return result.returncode == 0
        
    except Exception as e:
        log_print(f"‚ùå Error running {script_name}: {e}")
        return False

def run_sort_step():
    """Run sorting step with configuration."""
    log_print("\nüìã C·∫•u h√¨nh ph√¢n lo·∫°i:")
    log_print("   1 = M·ªôt ng∆∞·ªùi (folder A)")
    log_print("   2 = Hai ng∆∞·ªùi (folders A, B)")
    log_print("   3 = Ba ng∆∞·ªùi (folders A, B, C)")
    log_print("   4 = B·ªën ng∆∞·ªùi (folders A, B, C, D) - m·∫∑c ƒë·ªãnh")
    
    while True:
        try:
            folders = input("\nNh·∫≠p s·ªë ng∆∞·ªùi (1-4, m·∫∑c ƒë·ªãnh 4): ").strip()
            if not folders:
                folders = "4"
            
            folders_int = int(folders)
            if 1 <= folders_int <= 4:
                break
            else:
                log_print("‚ùå Vui l√≤ng nh·∫≠p s·ªë t·ª´ 1-4")
        except ValueError:
            log_print("‚ùå Vui l√≤ng nh·∫≠p s·ªë h·ª£p l·ªá")
    
    # Run sort_cli.py with folder count
    return run_script("sort_cli.py", "Ph√¢n lo·∫°i file th√™u", ["--people", folders])

def show_status():
    """Show current directory status."""
    log_print("\nüìä TR·∫†NG TH√ÅI THU M·ª§C:")
    
    dirs_to_check = [
        ("files/design", "Design files (.pes)"),
        ("files/labels", "Label files (.png/.pdf/.jpg/.svg)"),
        ("sorted", "Sorted folders"),
        ("sorted/A/dst", "DST files - Team A"),
        ("sorted/B/dst", "DST files - Team B"),
        ("sorted/C/dst", "DST files - Team C"),
        ("sorted/D/dst", "DST files - Team D"),
        ("sorted/A/labels", "Labels - Team A"),
        ("sorted/B/labels", "Labels - Team B"),
        ("sorted/C/labels", "Labels - Team C"),
        ("sorted/D/labels", "Labels - Team D"),
    ]
    
    for dir_path, description in dirs_to_check:
        if os.path.exists(dir_path):
            files = [f for f in os.listdir(dir_path) if os.path.isfile(os.path.join(dir_path, f))]
            log_print(f"üìÅ {description}: {len(files)} files")
        else:
            log_print(f"üìÅ {description}: Ch∆∞a t·ªìn t·∫°i")

def run_individual_step():
    """Run individual step."""
    steps = [
        ("download_from_dropbox.py", "T·∫£i file t·ª´ Dropbox"),
        ("sort_cli.py", "Ph√¢n lo·∫°i file th√™u"),
        ("export_dst.py", "Xu·∫•t file DST"),
        ("map_dst_labels.py", "G·∫Øn nh√£n DST")
    ]
    
    log_print("\nC√°c b∆∞·ªõc c√≥ th·ªÉ ch·∫°y:")
    for i, (script, desc) in enumerate(steps, 1):
        log_print(f"{i}. {desc}")
    
    while True:
        try:
            choice = input("\nCh·ªçn b∆∞·ªõc (1-4) ho·∫∑c 'b' ƒë·ªÉ quay l·∫°i: ").strip().lower()
            
            if choice == 'b':
                return
            
            step_num = int(choice)
            if 1 <= step_num <= 4:
                script, description = steps[step_num - 1]
                
                if step_num == 2:  # Sort step needs special handling
                    success = run_sort_step()
                else:
                    success = run_script(script, description)
                
                if success:
                    log_print(f"‚úÖ {description} completed successfully!")
                else:
                    log_print(f"‚ùå {description} failed!")
                break
            else:
                log_print("‚ùå Vui l√≤ng ch·ªçn s·ªë t·ª´ 1-4")
                
        except ValueError:
            log_print("‚ùå Vui l√≤ng nh·∫≠p s·ªë h·ª£p l·ªá")

def run_all_steps():
    """Run all steps automatically."""
    steps = [
        ("download_from_dropbox.py", "T·∫£i file t·ª´ Dropbox", "auto_download"),
        ("sort_cli.py", "Ph√¢n lo·∫°i file th√™u", "special"),
        ("export_dst.py", "Xu·∫•t file DST", "auto_confirm"),
        ("map_dst_labels.py", "G·∫Øn nh√£n DST", "auto_confirm")
    ]
    
    log_print("\nüöÄ Ch·∫°y t·∫•t c·∫£ c√°c b∆∞·ªõc t·ª± ƒë·ªông...")
    confirm = input("B·∫°n c√≥ ch·∫Øc ch·∫Øn? (y/N): ").strip().lower()
    
    if confirm != 'y':
        log_print("‚ùå H·ªßy b·ªè")
        return
    
    failed_steps = []
    
    for i, (script, description, special) in enumerate(steps, 1):
        log_print(f"\nüìç ƒêang ch·∫°y b∆∞·ªõc {i}/4: {description}")
        
        if special == "special" and script == "sort_cli.py":
            success = run_sort_step()
        elif special == "auto_download" and script == "download_from_dropbox.py":
            # Auto input "5" and "y" only, then let user manually input start/end IDs
            log_print("ü§ñ Auto mode: Download script")
            log_print("üìù T·ª± ƒë·ªông ch·ªçn option 5 v√† x√°c nh·∫≠n 'y'")
            log_print("üìù Sau ƒë√≥ b·∫°n s·∫Ω th·∫•y API range v√† nh·∫≠p start/end ID th·ªß c√¥ng")
            
            # Use auto inputs: only 5 (option) and y (confirm), then interactive for start/end
            auto_inputs = ["5", "y"]  # Only auto input option and confirm
            success = run_script_with_partial_input(script, description, auto_inputs)
        
        else:
            success = run_script(script, description)
        
        if not success:
            failed_steps.append(f"B∆∞·ªõc {i}: {description}")
    
    log_print(f"\n{'='*60}")
    if failed_steps:
        log_print("‚ùå C√ÅC B∆Ø·ªöC B·ªä L·ªñI:")
        for step in failed_steps:
            log_print(f"   ‚Ä¢ {step}")
    else:
        log_print("‚úÖ T·∫§T C·∫¢ C√ÅC B∆Ø·ªöC HO√ÄN TH√ÄNH TH√ÄNH C√îNG!")
    log_print(f"{'='*60}")

def main():
    """Main workflow function."""
    log_print("="*60)
    log_print("EMBROIDERY MANAGEMENT WORKFLOW")
    log_print("="*60)
    
    log_print("\nQuy tr√¨nh ho√†n ch·ªânh (4 b∆∞·ªõc):")
    log_print("\n1. üì• T·∫£i file t·ª´ Dropbox")
    log_print("   - Download .pes files ‚Üí files/design/")
    log_print("   - Download labels ‚Üí files/labels/")
    
    log_print("\n2. üìÇ Ph√¢n lo·∫°i file")
    log_print("   - Ph√¢n t√≠ch v√† nh√≥m file .pes")
    log_print("   - T·∫°o folders A/B/C trong sorted/")
    log_print("   - Di chuy·ªÉn files v√†o folders (move)")
    log_print("   - Labels ·ªü l·∫°i files/labels/ (s·∫Ω x·ª≠ l√Ω ·ªü b∆∞·ªõc 4)")
    log_print("   - T·∫°o CSV/XLSX reports")
    
    log_print("\n3. üéØ Xu·∫•t file DST")
    log_print("   - Chuy·ªÉn .pes ‚Üí .dst v·ªõi t√™n XXXYLZMDD")
    log_print("   - X·ª≠ l√Ω multi-face items")
    log_print("   - L∆∞u v√†o sorted/*/dst/")
    
    log_print("\n4. üè∑Ô∏è  G·∫Øn nh√£n DST")
    log_print("   - ƒê·ªçc DST mapping log")
    log_print("   - Di chuy·ªÉn labels c√≥ DST v√†o sorted/*/labels/")
    log_print("   - G·∫Øn t√™n DST v√†o PNG labels")
    log_print("   - Multi-face: 'DST1 | DST2 | DST3'")
    log_print("   - Labels kh√¥ng c√≥ DST ·ªü l·∫°i files/labels/")
    
    # Check requirements
    log_print("\nChecking requirements...")
    if not check_requirements():
        sys.exit(1)
    
    while True:
        log_print("\nCh·ªçn t√πy ch·ªçn:")
        log_print("1. Ch·∫°y t·ª´ng b∆∞·ªõc (c√≥ x√°c nh·∫≠n cho m·ªói b∆∞·ªõc)")
        log_print("2. Ch·∫°y t·∫•t c·∫£ (auto mode)")
        log_print("3. Ch·∫°y b∆∞·ªõc c·ª• th·ªÉ")
        log_print("4. Hi·ªÉn th·ªã tr·∫°ng th√°i th∆∞ m·ª•c")
        
        choice = input("\nNh·∫≠p l·ª±a ch·ªçn (1-4) ho·∫∑c 'q' ƒë·ªÉ tho√°t: ").strip().lower()
        
        if choice == 'q':
            log_print("üëã T·∫°m bi·ªát!")
            break
        elif choice == '1':
            # Manual step by step
            run_all_steps()
        elif choice == '2':
            # Auto mode
            run_all_steps()
        elif choice == '3':
            # Individual step
            run_individual_step()
        elif choice == '4':
            # Show status
            show_status()
        else:
<<<<<<< HEAD
            log_print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá. Vui l√≤ng th·ª≠ l·∫°i.")
=======
            log_print(f"‚è≠Ô∏è  B·ªè qua b∆∞·ªõc {i}")
            log_debug(f"Step {i} skipped")

def run_all_auto():
    """Run all steps automatically."""
    log_print("\nüöÄ Ch·∫°y t·∫•t c·∫£ c√°c b∆∞·ªõc t·ª± ƒë·ªông...")
    confirm = input("B·∫°n c√≥ ch·∫Øc ch·∫Øn? (y/N): ").strip().lower()
    log_debug(f"Auto run confirmation: {confirm}")
    
    if confirm not in ['y', 'yes']:
        log_print("ƒê√£ h·ªßy b·ªè.")
        log_debug("Auto run cancelled by user")
        return
    
    steps = [
        ("download_from_dropbox.py", "T·∫£i file t·ª´ Dropbox"),
        ("sort_cli.py", "Ph√¢n lo·∫°i file th√™u"),
        ("export_dst.py", "Xu·∫•t file DST"),
        ("map_dst_labels.py", "G·∫Øn nh√£n DST")
    ]
    failed_steps = []
    log_debug("Starting automatic execution of all steps")
    for i, (script, description) in enumerate(steps, 1):
        log_print(f"\nüìç ƒêang ch·∫°y b∆∞·ªõc {i}/4: {description}")
        success = run_script(script, description)
        if not success:
            failed_steps.append(f"B∆∞·ªõc {i}: {description}")
    # Sau khi ho√†n th√†nh c√°c b∆∞·ªõc ch√≠nh, gom th∆∞ m·ª•c pes
    log_print("\nB·ªï sung: Gom c√°c th∆∞ m·ª•c c√≥ file pes...")
    move_pes_folders()
    log_print(f"\n{'='*60}")
    log_print("K·∫æT QU·∫¢ CU·ªêI C√ôNG")
    log_print(f"{'='*60}")
    if failed_steps:
        log_error(f"‚ùå {len(failed_steps)} b∆∞·ªõc th·∫•t b·∫°i:")
        for step in failed_steps:
            log_error(f"   - {step}")
    else:
        log_print("‚úÖ T·∫•t c·∫£ 4 b∆∞·ªõc ho√†n th√†nh th√†nh c√¥ng!")
        log_print("\nüéâ Quy tr√¨nh ho√†n ch·ªânh! Ki·ªÉm tra th∆∞ m·ª•c 'sorted/' ƒë·ªÉ xem k·∫øt qu·∫£.")
    log_debug(f"Auto execution completed. Failed steps: {len(failed_steps)}")

def run_specific_step():
    """Run a specific step."""
    steps = [
        ("download_from_dropbox.py", "T·∫£i file t·ª´ Dropbox"),
        ("sort_cli.py", "Ph√¢n lo·∫°i file th√™u"),
        ("export_dst.py", "Xu·∫•t file DST"),
        ("map_dst_labels.py", "G·∫Øn nh√£n DST")
    ]
    
    log_print("\nCh·ªçn b∆∞·ªõc ƒë·ªÉ ch·∫°y:")
    for i, (script, description) in enumerate(steps, 1):
        log_print(f"{i}. {description} ({script})")
    log_print("")
    
    try:
        choice = int(input("Nh·∫≠p s·ªë b∆∞·ªõc (1-4): ").strip())
        log_debug(f"Specific step choice: {choice}")
        
        if 1 <= choice <= 4:
            script, description = steps[choice - 1]
            run_script(script, description)
        else:
            log_error("S·ªë b∆∞·ªõc kh√¥ng h·ª£p l·ªá.")
    except ValueError:
        log_error("Vui l√≤ng nh·∫≠p s·ªë.")

def show_directory_status():
    """Show current directory status."""
    log_print(f"\n{'='*60}")
    log_print("TR·∫†NG TH√ÅI TH·ª¶ M·ª§C")
    log_print(f"{'='*60}")
    
    dirs_to_check = [
        ("files/", "Th∆∞ m·ª•c d·ªØ li·ªáu ch√≠nh"),
        ("files/design/", "File .pes t·ª´ Dropbox"),
        ("files/labels/", "File nh√£n t·ª´ Dropbox"),
        ("sorted/", "K·∫øt qu·∫£ ph√¢n lo·∫°i"),
        ("sorted/A/", "File ng∆∞·ªùi A"),
        ("sorted/B/", "File ng∆∞·ªùi B"), 
        ("sorted/C/", "File ng∆∞·ªùi C"),
        ("sorted/output/", "CSV/XLSX/JSON reports")
    ]
    
    log_debug("Checking directory status")
    
    for dir_path, description in dirs_to_check:
        path = Path(dir_path)
        if path.exists():
            if path.is_dir():
                file_count = len(list(path.iterdir())) if path.is_dir() else 0
                log_print(f"‚úÖ {description:30} ({file_count} items)")
                log_debug(f"Directory {dir_path}: {file_count} items")
            else:
                log_print(f"‚ùì {description:30} (not a directory)")
                log_debug(f"Path {dir_path} exists but is not a directory")
        else:
            log_print(f"‚ùå {description:30} (not found)")
            log_debug(f"Directory {dir_path} not found")
    
    # Check for specific file types
    log_print("")
    log_print("Chi ti·∫øt file:")
    
    file_checks = [
        ("files/design/*.pes", "PES files"),
        ("files/labels/*.png", "PNG labels"),
        ("sorted/*/dst/*.dst", "DST files"),
        ("sorted/output/*.csv", "CSV reports"),
        ("sorted/output/*.xlsx", "Excel reports"),
        ("sorted/output/*.json", "JSON logs")
    ]
    
    for pattern, description in file_checks:
        files = list(Path().glob(pattern))
        log_print(f"   {description:20}: {len(files)} files")
        log_debug(f"File pattern {pattern}: {len(files)} files")
>>>>>>> 33758f461ed244b281fd68aeed2356a19662c9a8

if __name__ == "__main__":
    main()