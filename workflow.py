
#!/usr/bin/env python3
"""
Complete Embroidery Management Workflow
Ch·∫°y t·ª´ng b∆∞·ªõc ho·∫∑c t·∫•t c·∫£ c√°c b∆∞·ªõc trong quy tr√¨nh qu·∫£n l√Ω file th√™u.
"""

import os
import sys
import subprocess
from pathlib import Path
import logging
from datetime import datetime

def move_pes_folders():
    """Gom t·∫•t c·∫£ c√°c th∆∞ m·ª•c con c√≥ file pes v√†o th∆∞ m·ª•c pes trong t·ª´ng A, B, C, D."""
    base_sorted = Path("sorted")
    group_folders = ["A", "B", "C", "D"]
    pes_folder_name = "pes"
    pes_count = 0
    for group in group_folders:
        group_path = base_sorted / group
        if not group_path.exists() or not group_path.is_dir():
            continue
        pes_path = group_path / pes_folder_name
        pes_path.mkdir(exist_ok=True)
        # Duy·ªát t·∫•t c·∫£ th∆∞ m·ª•c con trong group
        for sub in group_path.iterdir():
            if sub.is_dir() and sub.name != pes_folder_name:
                pes_files = list(sub.glob("*.pes"))
                if pes_files:
                    # Di chuy·ªÉn to√†n b·ªô th∆∞ m·ª•c v√†o pes
                    dest = pes_path / sub.name
                    if dest.exists():
                        log_print(f"‚ö†Ô∏è Th∆∞ m·ª•c ƒë√£ t·ªìn t·∫°i: {dest}, b·ªè qua!")
                        continue
                    sub.rename(dest)
                    pes_count += 1
                    log_print(f"ƒê√£ di chuy·ªÉn {sub} v√†o {pes_path}")
    log_print(f"\n‚úÖ ƒê√£ gom {pes_count} th∆∞ m·ª•c c√≥ file pes v√†o pes/ trong t·ª´ng nh√≥m.")

# Setup logging
def setup_logging():
    """Setup logging to both console and file."""
    log_file = "workflow_log.txt"
    
    # Create logger
    logger = logging.getLogger('workflow')
    logger.setLevel(logging.DEBUG)
    
    # Clear existing handlers
    logger.handlers.clear()
    
    # Create formatters
    detailed_formatter = logging.Formatter(
        '%(asctime)s - %(levelname)s - %(message)s',
        datefmt='%Y-%m-%d %H:%M:%S'
    )
    simple_formatter = logging.Formatter('%(message)s')
    
    # File handler - detailed logging
    file_handler = logging.FileHandler(log_file, mode='a', encoding='utf-8')
    file_handler.setLevel(logging.DEBUG)
    file_handler.setFormatter(detailed_formatter)
    
    # Console handler - simple output
    console_handler = logging.StreamHandler(sys.stdout)
    console_handler.setLevel(logging.INFO)
    console_handler.setFormatter(simple_formatter)
    
    # Add handlers
    logger.addHandler(file_handler)
    logger.addHandler(console_handler)
    
    return logger

# Initialize logger
logger = setup_logging()

def log_print(message):
    """Print to console and log to file."""
    logger.info(message)

def log_error(message):
    """Print error to console and log to file."""
    logger.error(message)

def log_debug(message):
    """Log debug info (file only)."""
    logger.debug(message)
import logging
from datetime import datetime

def run_script(script_name, description):
    """Run a Python script and handle errors."""
    log_print(f"\n{'='*60}")
    log_print(f"RUNNING: {description}")
    log_print(f"Script: {script_name}")
    log_print(f"{'='*60}")
    
    log_debug(f"Starting script: {script_name}")
    
    try:
        # Run script interactively (no capture_output) so user can see prompts
        result = subprocess.run([sys.executable, script_name], check=True)
        log_print(f"‚úÖ {description} completed successfully!")
        log_debug(f"Script {script_name} completed with return code 0")
        return True
    except subprocess.CalledProcessError as e:
        log_error(f"‚ùå {description} failed with error code {e.returncode}")
        log_debug(f"Script {script_name} failed with return code {e.returncode}")
        return False
    except KeyboardInterrupt:
        log_error(f"üõë {description} interrupted by user")
        log_debug(f"Script {script_name} interrupted by user")
        return False

def check_requirements():
    """Check if required directories and files exist."""
    log_print("Checking requirements...")
    
    required_scripts = [
        "download_from_dropbox.py",
        "sort_cli.py", 
        "export_dst.py",
        "map_dst_labels.py"
    ]
    
    missing_scripts = []
    for script in required_scripts:
        if not os.path.exists(script):
            missing_scripts.append(script)
    
    if missing_scripts:
        log_error(f"‚ùå Missing required scripts: {', '.join(missing_scripts)}")
        return False
    
    log_print("‚úÖ All required scripts found")
    return True

def show_workflow():
    """Show the complete workflow steps."""
    log_print("=" * 60)
    log_print("EMBROIDERY MANAGEMENT WORKFLOW")
    log_print("=" * 60)
    log_print("")
    log_print("Quy tr√¨nh ho√†n ch·ªânh (4 b∆∞·ªõc):")
    log_print("")
    log_print("1. üì• T·∫£i file t·ª´ Dropbox")
    log_print("   - Download .pes files ‚Üí files/design/")
    log_print("   - Download labels ‚Üí files/labels/")
    log_print("")
    log_print("2. üìÇ Ph√¢n lo·∫°i file")
    log_print("   - Ph√¢n t√≠ch v√† nh√≥m file .pes")
    log_print("   - T·∫°o folders A/B/C trong sorted/")
    log_print("   - Di chuy·ªÉn files v√†o folders (move)")
    log_print("   - Labels ·ªü l·∫°i files/labels/ (s·∫Ω x·ª≠ l√Ω ·ªü b∆∞·ªõc 4)")
    log_print("   - T·∫°o CSV/XLSX reports")
    log_print("")
    log_print("3. üéØ Xu·∫•t file DST")
    log_print("   - Chuy·ªÉn .pes ‚Üí .dst v·ªõi t√™n XXXYLZMDD")
    log_print("   - X·ª≠ l√Ω multi-face items") 
    log_print("   - L∆∞u v√†o sorted/*/dst/")
    log_print("")
    log_print("4. üè∑Ô∏è  G·∫Øn nh√£n DST")
    log_print("   - ƒê·ªçc DST mapping log")
    log_print("   - Di chuy·ªÉn labels c√≥ DST v√†o sorted/*/labels/")
    log_print("   - G·∫Øn t√™n DST v√†o PNG labels")
    log_print("   - Multi-face: 'DST1 | DST2 | DST3'")
    log_print("   - Labels kh√¥ng c√≥ DST ·ªü l·∫°i files/labels/")
    log_print("")

def main():
    """Main workflow controller."""
    # Log session start
    log_debug("="*60)
    log_debug(f"WORKFLOW SESSION STARTED: {datetime.now()}")
    log_debug("="*60)
    
    show_workflow()
    
    if not check_requirements():
        return 1
    
    log_print("Ch·ªçn t√πy ch·ªçn:")
    log_print("1. Ch·∫°y t·ª´ng b∆∞·ªõc (c√≥ x√°c nh·∫≠n cho m·ªói b∆∞·ªõc)")
    log_print("2. Ch·∫°y t·∫•t c·∫£ (auto mode)")
    log_print("3. Ch·∫°y b∆∞·ªõc c·ª• th·ªÉ")
    log_print("4. Hi·ªÉn th·ªã tr·∫°ng th√°i th∆∞ m·ª•c")
    log_print("")
    
    choice = input("Nh·∫≠p l·ª±a ch·ªçn (1-4) ho·∫∑c 'q' ƒë·ªÉ tho√°t: ").strip()
    log_debug(f"User choice: {choice}")
    
    if choice == 'q':
        log_print("ƒê√£ tho√°t.")
        log_debug("Session ended by user")
        return 0
    
    elif choice == '1':
        # Run step by step with confirmation
        run_step_by_step()
    
    elif choice == '2':
        # Run all automatically
        run_all_auto()
    
    elif choice == '3':
        # Run specific step
        run_specific_step()
    
    elif choice == '4':
        # Show directory status
        show_directory_status()
    
    else:
        log_error("L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá.")
        return 1
    
    log_debug(f"WORKFLOW SESSION ENDED: {datetime.now()}")
    log_debug("="*60)
    return 0

def run_step_by_step():
    """Run each step with user confirmation."""
    steps = [
        ("download_from_dropbox.py", "T·∫£i file t·ª´ Dropbox"),
        ("sort_cli.py", "Ph√¢n lo·∫°i file th√™u"),
        ("export_dst.py", "Xu·∫•t file DST"),
        ("map_dst_labels.py", "G·∫Øn nh√£n DST")
    ]
    
    log_debug("Starting step-by-step execution")
    
    for i, (script, description) in enumerate(steps, 1):
        log_print(f"\nüîÑ B∆∞·ªõc {i}/4: {description}")
        proceed = input(f"Ch·∫°y '{script}'? (y/N/q): ").strip().lower()
        log_debug(f"Step {i} user input: {proceed}")
        
        if proceed == 'q':
            log_print("ƒê√£ d·ª´ng quy tr√¨nh.")
            log_debug("Step-by-step execution stopped by user")
            break
        elif proceed in ['y', 'yes']:
            success = run_script(script, description)
            if not success:
                log_print(f"‚ö†Ô∏è  B∆∞·ªõc {i} th·∫•t b·∫°i. Ti·∫øp t·ª•c?")
                cont = input("Ti·∫øp t·ª•c v·ªõi b∆∞·ªõc ti·∫øp theo? (y/N): ").strip().lower()
                log_debug(f"Step {i} failed, continue input: {cont}")
                if cont not in ['y', 'yes']:
                    break
        else:
            log_print(f"‚è≠Ô∏è  B·ªè qua b∆∞·ªõc {i}")
            log_debug(f"Step {i} skipped")

def run_all_auto():
    """Run all steps automatically."""
    log_print("\nüöÄ Ch·∫°y t·∫•t c·∫£ c√°c b∆∞·ªõc t·ª± ƒë·ªông...")
    confirm = input("B·∫°n c√≥ ch·∫Øc ch·∫Øn? (y/N): ").strip().lower()
    log_debug(f"Auto run confirmation: {confirm}")
    
    if confirm not in ['y', 'yes']:
        log_print("ƒê√£ h·ªßy b·ªè.")
        log_debug("Auto run cancelled by user")
        return
    
    steps = [
        ("download_from_dropbox.py", "T·∫£i file t·ª´ Dropbox"),
        ("sort_cli.py", "Ph√¢n lo·∫°i file th√™u"),
        ("export_dst.py", "Xu·∫•t file DST"),
        ("map_dst_labels.py", "G·∫Øn nh√£n DST")
    ]
    failed_steps = []
    log_debug("Starting automatic execution of all steps")
    for i, (script, description) in enumerate(steps, 1):
        log_print(f"\nüìç ƒêang ch·∫°y b∆∞·ªõc {i}/4: {description}")
        success = run_script(script, description)
        if not success:
            failed_steps.append(f"B∆∞·ªõc {i}: {description}")
    # Sau khi ho√†n th√†nh c√°c b∆∞·ªõc ch√≠nh, gom th∆∞ m·ª•c pes
    log_print("\nB·ªï sung: Gom c√°c th∆∞ m·ª•c c√≥ file pes...")
    move_pes_folders()
    log_print(f"\n{'='*60}")
    log_print("K·∫æT QU·∫¢ CU·ªêI C√ôNG")
    log_print(f"{'='*60}")
    if failed_steps:
        log_error(f"‚ùå {len(failed_steps)} b∆∞·ªõc th·∫•t b·∫°i:")
        for step in failed_steps:
            log_error(f"   - {step}")
    else:
        log_print("‚úÖ T·∫•t c·∫£ 4 b∆∞·ªõc ho√†n th√†nh th√†nh c√¥ng!")
        log_print("\nüéâ Quy tr√¨nh ho√†n ch·ªânh! Ki·ªÉm tra th∆∞ m·ª•c 'sorted/' ƒë·ªÉ xem k·∫øt qu·∫£.")
    log_debug(f"Auto execution completed. Failed steps: {len(failed_steps)}")

def run_specific_step():
    """Run a specific step."""
    steps = [
        ("download_from_dropbox.py", "T·∫£i file t·ª´ Dropbox"),
        ("sort_cli.py", "Ph√¢n lo·∫°i file th√™u"),
        ("export_dst.py", "Xu·∫•t file DST"),
        ("map_dst_labels.py", "G·∫Øn nh√£n DST")
    ]
    
    log_print("\nCh·ªçn b∆∞·ªõc ƒë·ªÉ ch·∫°y:")
    for i, (script, description) in enumerate(steps, 1):
        log_print(f"{i}. {description} ({script})")
    log_print("")
    
    try:
        choice = int(input("Nh·∫≠p s·ªë b∆∞·ªõc (1-4): ").strip())
        log_debug(f"Specific step choice: {choice}")
        
        if 1 <= choice <= 4:
            script, description = steps[choice - 1]
            run_script(script, description)
        else:
            log_error("S·ªë b∆∞·ªõc kh√¥ng h·ª£p l·ªá.")
    except ValueError:
        log_error("Vui l√≤ng nh·∫≠p s·ªë.")

def show_directory_status():
    """Show current directory status."""
    log_print(f"\n{'='*60}")
    log_print("TR·∫†NG TH√ÅI TH·ª¶ M·ª§C")
    log_print(f"{'='*60}")
    
    dirs_to_check = [
        ("files/", "Th∆∞ m·ª•c d·ªØ li·ªáu ch√≠nh"),
        ("files/design/", "File .pes t·ª´ Dropbox"),
        ("files/labels/", "File nh√£n t·ª´ Dropbox"),
        ("sorted/", "K·∫øt qu·∫£ ph√¢n lo·∫°i"),
        ("sorted/A/", "File ng∆∞·ªùi A"),
        ("sorted/B/", "File ng∆∞·ªùi B"), 
        ("sorted/C/", "File ng∆∞·ªùi C"),
        ("sorted/output/", "CSV/XLSX/JSON reports")
    ]
    
    log_debug("Checking directory status")
    
    for dir_path, description in dirs_to_check:
        path = Path(dir_path)
        if path.exists():
            if path.is_dir():
                file_count = len(list(path.iterdir())) if path.is_dir() else 0
                log_print(f"‚úÖ {description:30} ({file_count} items)")
                log_debug(f"Directory {dir_path}: {file_count} items")
            else:
                log_print(f"‚ùì {description:30} (not a directory)")
                log_debug(f"Path {dir_path} exists but is not a directory")
        else:
            log_print(f"‚ùå {description:30} (not found)")
            log_debug(f"Directory {dir_path} not found")
    
    # Check for specific file types
    log_print("")
    log_print("Chi ti·∫øt file:")
    
    file_checks = [
        ("files/design/*.pes", "PES files"),
        ("files/labels/*.png", "PNG labels"),
        ("sorted/*/dst/*.dst", "DST files"),
        ("sorted/output/*.csv", "CSV reports"),
        ("sorted/output/*.xlsx", "Excel reports"),
        ("sorted/output/*.json", "JSON logs")
    ]
    
    for pattern, description in file_checks:
        files = list(Path().glob(pattern))
        log_print(f"   {description:20}: {len(files)} files")
        log_debug(f"File pattern {pattern}: {len(files)} files")

if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)